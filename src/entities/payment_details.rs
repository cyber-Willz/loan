//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use super::sea_orm_active_enums::Currency;
use super::sea_orm_active_enums::SourceType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "PaymentDetails")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub payment_id: i32,
    pub transaction_id: i32,
    pub product_id: i32,
    pub source_type: SourceType,
    pub description: Option<String>,
    #[sea_orm(column_type = "Float")]
    pub gross_payment_amount: f32,
    #[sea_orm(column_type = "Float")]
    pub service_fee_deducted: f32,
    #[sea_orm(column_type = "Float")]
    pub net_payment_amount: f32,
    #[sea_orm(column_type = "Float")]
    pub net_savings: f32,
    pub currency: Currency,
    pub created_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::loan_products::Entity",
        from = "Column::ProductId",
        to = "super::loan_products::Column::ProductId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    LoanProducts,
    #[sea_orm(
        belongs_to = "super::loan_transactions::Entity",
        from = "Column::TransactionId",
        to = "super::loan_transactions::Column::TransactionId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    LoanTransactions,
    #[sea_orm(
        belongs_to = "super::payments::Entity",
        from = "Column::PaymentId",
        to = "super::payments::Column::PaymentId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Payments,
}

impl Related<super::loan_products::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoanProducts.def()
    }
}

impl Related<super::loan_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoanTransactions.def()
    }
}

impl Related<super::payments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
