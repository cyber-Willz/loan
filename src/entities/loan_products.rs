//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "LoanProducts")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub product_id: i32,
    pub lender_id: i32,
    pub product_name: String,
    #[sea_orm(column_type = "Float")]
    pub original_loan_amount: f32,
    #[sea_orm(column_type = "Float")]
    pub loan_amount: f32,
    #[sea_orm(column_type = "Float")]
    pub loan_amount_service_fee: f32,
    #[sea_orm(column_type = "Float")]
    pub number_of_months: f32,
    #[sea_orm(column_type = "Float")]
    pub interest_rate: f32,
    #[sea_orm(column_type = "Float")]
    pub monthly_payment: f32,
    #[sea_orm(column_type = "Float")]
    pub total_interest: f32,
    #[sea_orm(column_type = "Float")]
    pub total_principal_interest: f32,
    #[sea_orm(column_type = "Text")]
    pub product_description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::borrower_payment_ledger::Entity")]
    BorrowerPaymentLedger,
    #[sea_orm(has_many = "super::lender_loan_product_ledger::Entity")]
    LenderLoanProductLedger,
    #[sea_orm(
        belongs_to = "super::lenders::Entity",
        from = "Column::LenderId",
        to = "super::lenders::Column::LenderId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Lenders,
    #[sea_orm(has_many = "super::loan_requests::Entity")]
    LoanRequests,
    #[sea_orm(has_many = "super::payment_details::Entity")]
    PaymentDetails,
}

impl Related<super::borrower_payment_ledger::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BorrowerPaymentLedger.def()
    }
}

impl Related<super::lender_loan_product_ledger::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LenderLoanProductLedger.def()
    }
}

impl Related<super::lenders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lenders.def()
    }
}

impl Related<super::loan_requests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoanRequests.def()
    }
}

impl Related<super::payment_details::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentDetails.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
