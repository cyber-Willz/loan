//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "LoanTransactions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub transaction_id: i32,
    pub request_id: i32,
    #[sea_orm(column_type = "Float")]
    pub approved_amount: f32,
    pub start_date: DateTime,
    pub end_date: DateTime,
    pub status: Status,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::borrower_payment_ledger::Entity")]
    BorrowerPaymentLedger,
    #[sea_orm(
        belongs_to = "super::loan_requests::Entity",
        from = "Column::RequestId",
        to = "super::loan_requests::Column::RequestId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    LoanRequests,
    #[sea_orm(has_many = "super::payment_details::Entity")]
    PaymentDetails,
    #[sea_orm(has_many = "super::payments::Entity")]
    Payments,
}

impl Related<super::borrower_payment_ledger::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BorrowerPaymentLedger.def()
    }
}

impl Related<super::loan_requests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoanRequests.def()
    }
}

impl Related<super::payment_details::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentDetails.def()
    }
}

impl Related<super::payments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
